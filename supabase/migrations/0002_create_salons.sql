-- Create the salons table
create table salons (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone not null default now(),
  owner_id uuid references public.profiles on delete cascade not null,
  name text not null,
  description text,
  location text,
  phone text,
  website text,
  avatar_url text,
  cover_image_url text,
  verified boolean default false
);

-- Enable Row Level Security for salons
alter table salons enable row level security;

-- Policy: Salons are public and can be viewed by anyone
create policy "Salons are viewable by everyone." on salons
  for select using (true);

-- Policy: Salon owners can insert their own salon
create policy "Owners can create their own salon." on salons
  for insert with check (
    auth.uid() = owner_id and
    (select role from public.profiles where id = auth.uid()) = 'owner'
  );

-- Policy: Salon owners can update their own salon
create policy "Owners can update their own salon." on salons
  for update using (
    auth.uid() = owner_id
  );

-- Policy: Salon owners can delete their own salon
create policy "Owners can delete their own salon." on salons
  for delete using (
    auth.uid() = owner_id
  );
